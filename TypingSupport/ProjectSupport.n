using System.Threading;
using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

[assembly: ProjectSupport("Hql", typeof(Hql.ProjectSupport))]

namespace Hql
{
  public partial class ProjectSupport : IProjectSupport
  {
    static NoLocation : Location       = Location(SourceSnapshot.Default.File, NSpan(0));
    static NoFile : ProjectSystem.File = SourceSnapshot.Default.File;
    static NoSpan : NSpan              = NSpan(0);

    public RefreshReferences(cancellationToken : CancellationToken, project : Project) : object
    {
      _ = cancellationToken;     
      
      def root = RootSymbol() <-
      {
        FullName = "<root>";
        Kind = "root";
      };

      root.MemberTable = TableScope(root, "MemberTable");
      root.Scope = root.MemberTable;

      
      def context = HqlDependentPropertyEvalContext(project);
            
      root.AddDeclaration(ExternalDeclaration.[RootSymbol](Name(NoLocation, "<root>")));

      root.EvalProperties(context);

      project.Data = ProjectData(context, root);
      project.Data
    }

    public RefreshProject(cancellationToken : CancellationToken, _files : ImmutableArray[FileEvalPropertiesData], data : object) : void
    {
      def (context, root) = data :> ProjectData;
      context.CancellationToken = cancellationToken;

      root.MemberTable.Undefine(_.IsParsed);      
    }

    public GetSymbolById(data : object, symbolId : int) : ValueOption[DeclarationSymbol]
    {
      def (_context, root) = data :> ProjectData;
      def findSymbol(tableScope : TableScope) : ValueOption[DeclarationSymbol]
      {
        foreach (symbols in tableScope.Symbols)
        foreach (symbol in symbols)
        {
          when (symbol.Id == symbolId)
            return ValueOption.Some(symbol);

          when (symbol is NamespaceSymbol as ns)
          {
            def result = findSymbol(ns.MemberTable);
            when (result.IsSome)
              return result;
          }
        }

        ValueOption.None()
      }

      findSymbol(root.MemberTable)
    }

    public DeconstructType(_symbol : DeclarationSymbol, type : out TypeSymbol, typeArgs : out ImmutableArray[TypeSymbol]) : bool
    {
      type = null;
      typeArgs = ImmutableArray.Empty;
      false
    }

    public VisitGlobalSymbols(data : object, callback : Predicate[DeclarationSymbol]) : void
    {
      def (_context, root) = data :> ProjectData;
      def symbolsList = root.MemberTable.Symbols.ToArray();
      foreach (symbols in symbolsList)
        foreach (symbol in symbols)
          when (callback(symbol))
            return;
    }

    public Postprocessing(cancellationToken : System.Threading.CancellationToken, project : Nitra.ProjectSystem.Project, asts : System.Collections.Immutable.ImmutableArray[(Nitra.Declarations.IAst * bool)], data : object) : void
    {
      IgnoreParams();
    }
  }
}

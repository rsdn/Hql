using Nitra;
using Nitra.Runtime;
using Nitra.Declarations;
using System.Globalization;

namespace Hql
{
   map syntax HqlSyntax.Start -> Start
   {
      Query -> Query;
   }

   map syntax HqlSyntax.Query -> Query
   {     
      SelectStms.Item1 -> SelectStms;
	  SelectStms.Item2 -> UnionTypes;
   }
   
   map syntax HqlSyntax.UnionType -> UnionType
   {
      | Union -> Union {}
	  | UnionAll -> UnionAll {}
   }  

   map syntax HqlSyntax.SelectStm -> SelectStm
   {
      FromClause -> FromClause;
	  SelectClause -> SelectClause;
	  WhereClause  -> WhereClause;
	  GroupClause  -> GroupClause;
	  OrderClause  -> OrderClause;
   }   

   map syntax HqlSyntax.FromClause -> FromClause
   {
      this.TableSources.Item1 -> TableSources;
   }

   map syntax HqlSyntax.TableSource -> TableSource
   {
      | TableSourceItemJoined { this.TableSourceItemJoined.TableSourceItem -> TableSourceItem; this.TableSourceItemJoined.JoinParts -> JoinParts; }
	  | TableSourceItemJoinedWithBrackets { this.TableSourceItemJoined.TableSourceItem -> TableSourceItem; this.TableSourceItemJoined.JoinParts -> JoinParts; }
   }

   map syntax HqlSyntax.JoinPart -> JoinPart
   {
     | Join -> Join { this.JoinType -> JoinType; this.RightTableSource -> RightTable; this.LogicalExpression -> Expression; }
	 | Link -> Link { this.TableNameFull -> TableNameFull; } 
   }
   
   map syntax HqlSyntax.JoinType -> JoinType
   {
     | Inner -> Inner {}
	 | OuterJoin 
		 {
		   match(this.OuterJoinType)
		   {
			 | Left -> Left {}
			 | Right -> Right {}						  
			 | Full -> Full {}
		   }
		 }
   }

   map syntax HqlSyntax.TableSourceItem -> TableSourceItem
   {
      | SubQuery -> SubQuery { this.SubQuery.Query -> Query; this.SubQuery.Alias -> Alias; }
	  | TableNameFull -> TableSourceNameFull { TableNameFull -> TableNameFull;}
   }

   map syntax HqlSyntax.TableNameFull -> TableNameFull
   {
      this.TableName -> TableName;
	  match(this.Alias)
			 {
			   | Some(value) -> Some(value)
			   | None() -> None()
			 } -> Alias;
   }

   map syntax HqlSyntax.QualifiedIdentifier -> QualifiedIdentifier
   {
     QualifiedIdentifierParts.Item1 -> QualifiedIdentifierParts;
	 QualifiedIdentifierParts.Item2 -> Delimiters;
   }

   map syntax HqlSyntax.QualifiedIdentifierPart -> QualifiedIdentifierPart
   {      
        | SingleReference 
			{
			  Value = ParsedValue(this.Reference.Span, GetText(this.Reference.Span));
			}
	    | QuotedReference 
			{
			  Value = ParsedValue(this.Ref, GetText(this.Ref));
			}
   }

   map syntax HqlSyntax.Delimiter -> Delimiter
   {
      | FullJoin -> FullJoinDelimiter {}
	  | RightJoin -> RightJoinDelimiter {}
	  | LeftJoin -> LeftJoinDelimiter {}
	  | DefaultJoin -> DefaultJoinDelimiter {}
   }

   
   //map syntax HqlSyntax.Alias -> Alias
   //{
   //   Name = match (this.StringAlias)
//	  {
//	    | QualifiedIdentifierPart -> match(this)
//		                             {
//									   | SingleReference => Reference
//									   | QuotedReference => ParsedValue(this.Ref, GetText(this.Ref))
//									 }
//		| StringLiteralRule -> match(this)
//		                       {
//							     | DoubleStringLiteralPartRule => GetText(this)
//								 | SingleStringLiteralPartRule => GetText(this)
//							   }
//	  };
//   }
   

   map syntax HqlSyntax.Alias -> Alias
   {
      Name = ParsedValue(NSpan(0), "ddd");
   }

   map syntax HqlSyntax.SelectClause -> SelectClause
   {
      Distinct = ParsedValue(this.Span
	              , match(Distinct)
	             {
				   | None() => false
				   | _ => true
				 });

	  this.Columns.Item1 -> Columns;
   }

   map syntax HqlSyntax.Column -> Column
   {
     | AllTabAllFields -> AllTabAllFields {}
	 | OneTabAllFields -> OneTabAllFields { this.QualifiedIdentifier -> TableName;}
	 | Expression -> ColumnExpressionWithAlias { Expression -> Expression; None() -> Alias; }
	 | ExpressionWithAlias -> ColumnExpressionWithAlias { Expression -> Expression; Some(Alias) -> Alias; }
   }

   map syntax HqlSyntax.OrderClause -> OrderClause
   {
      this.OrderList.Item1 -> OrderFields;
   }

   map syntax HqlSyntax.OrderField -> OrderField
   {
     | OrderAsc -> OrderAsc { this.Expression -> Expression; }
	 | OrderDesc -> OrderDesc { this.Expression -> Expression; }
   }

   map syntax HqlSyntax.GroupClause -> GroupClause
   {
      this.GroupList.Item1 -> Expressions;
	  this.HavingClause -> HavingClause; 
   }
   
   map syntax HqlSyntax.HavingClause -> HavingClause
   {
      this.LogicalExpression -> LogicalExpression;
   }

   map syntax HqlSyntax.WhereClause -> WhereClause
   {
      this.LogicalExpression -> LogicalExpression;
   }

   map syntax HqlSyntax.MyValues -> MyValues
   {
     | QueryExpression -> QueryExpression { this.Query -> Query; }
	 | BracketsExpression -> BracketsExpression { this.Expressions.Item1 -> Expressions; }
   }

   map syntax HqlSyntax.LogicalExpression -> LogicalExpression
   {
     | Braces -> this.LogicalExpression
	 | ValueIsNotNull { this.Expression -> Expr; }
	 | ValueIsNull { this.Expression -> Expr; }
	 | Like { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | NotLike { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | In { this.Expression -> Expr; this.MyValues -> Values; }
	 | NotIn { this.Expression -> Expr; this.MyValues -> Values; } 
	 | Exists  { this.Query -> Query; }
	 | Or { this.LogicalExpression1 -> Expr1; this.LogicalExpression2 -> Expr2; }
	 | And { this.LogicalExpression1 -> Expr1; this.LogicalExpression2 -> Expr2; }
	 | Not { this.LogicalExpression -> Expr; }
	 | Equal { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | NotEqual { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | LessEqual { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | Less { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | GreaterEqual { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | Greater { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
   }

   map syntax HqlSyntax.CaseCondition -> CaseCondition
   {
      this.Condition -> Condition;
	  this.Then -> Then;
   }

   map syntax HqlSyntax.Field -> Field
   {
     | SingleField -> SingleField { this.QualifiedIdentifierPart -> FieldName;}
	 | TableLink -> TableLinkField { [] -> TableLinks; this.Field -> FieldName; }
   }

//   map syntax HqlSyntax.Field -> Field
//   {
//     | SingleField -> SingleField { this.QualifiedIdentifierPart -> FieldName;}
//	 | TableLink =
//	   { 	     
//	     def args = array((this.Prefix.Count-1) * 2 + 1);
//		 foreach (rs in this.Prefix with index)
//		 {
//		   def qualifiedPart : QualifiedIdentifierPartHolder = QualifiedIdentifierPartHolder { rs.Item1 -> QualifiedIdentifierPart };		   
//           args[index] = TableLink(this.Location.WithSpan(NSpan(0)), 
//		   qualifiedPart.QualifiedIdentifierPart,
//		   match(rs.Item2)
//		   {
//             | Some(value) -> Some(value)
//			 | None() -> None(value)
//		   });	   
//		 }
//		 TableLinkField(this.Location.WithSpan(NSpan(0)), args, this.Field)
//       }
//   }

   map syntax HqlSyntax.Expression -> Expression
   {
     | Braces -> this.Expression
	 | Query -> SubQueryExpression { this.Query -> Query; }
	 | IntegerLiteral { Value = ParsedValue(this.IntegerLiteral, int.Parse(GetText(this.IntegerLiteral))); }
	 | FloatLiteral { Value = ParsedValue(this.FloatLiteral, double.Parse(GetText(this.FloatLiteral))); }
     | StringLiteralRule 
	                     { 
						   Value = ParsedValue(NSpan(0), "ddd");
	                       //match(this)
						//	{
						//      | DoubleStringLiteralPartRule =>
						//		  ParsedValue(DoubleStringLiteralPartRule.StringPart,GetText(this.DoubleStringLiteralPartRule.StringPart));
						//	  | SingleStringLiteralPartRule =>
						//	       ParsedValue(this.StringPart, GetText(this.StringPart));
						//	};
						 }
	 | DateLiteral { Value = ParsedValue(this.DateLiteral, System.DateTime.Parse(GetText(this.DateLiteral))); }
	 | Null {}
	 | Field -> FieldExpression { Field -> Field; }
	 | Case { 
	         this.Conditions -> Conditions; 
			 match(this.Else)
			 {
			   | Some(value) -> Some(value.Item2)
			   | None() -> None()
			 } -> Else;
			}	         
	 | CountAll {}
	 | FunCall { this.FuncName -> FuncName; this.Expressions.Item1 -> Arguments; }
	 | Concat { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | Sum { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | Sub { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | Modulus { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | Multiply { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | Divide { this.Expression1 -> Expr1; this.Expression2 -> Expr2; }
	 | Plus { this.Expression -> Expr; }
	 | Minus { this.Expression -> Expr; }
   }

}
